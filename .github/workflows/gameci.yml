name: GameCI

on:
  workflow_call:
    secrets:
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
    inputs:
      unity:
        type: string
        default: '2022.3.6f1'
        description: '2022.3.6f1'
      vrcsdk-type:
        type: string
        description: 'avatars|worlds'
      vrcsdk-version:
        type: string
        description: '3.5.2'
      repos:
        type: string
        description: "https://vpm.nadena.dev/vpm.json\nhttps://vpm.narazaka.net/index.json"
      packages:
        type: string
        description: "nadena.dev.modular-avatar 1.1.1\nnet.narazaka.vrchat.avatar-menu-creater-for-ma 1.17.1"
      name:
        type: string
        description: 'case name postfix'
      customParameters:
        type: string
        description: '-nographics'
        default: '-nographics'
      coverageOptions:
        type: string
        description: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport'
        default: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport'
      assemblyNames:
        type: string
        description: 'AvatarMenuCreatorForMA.Test;AvatarMenuCreatorForMA.Core.Test'
      assemblyFilters:
        type: string
        description: '+AvatarMenuCreatorForMA.*,-AvatarMenuCreatorForMA.Test'

permissions:
  checks: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout template
        uses: actions/checkout@v4
        with:
          repository: vrchat-community/template-avatar

      - name: Checkout project assets
        uses: actions/checkout@v4
        with:
          repository: Narazaka/AvatarMenuCreaterForMA
          ref: gameci
          path: project-assets

      - name: Setup Project
        run: |
          cp -R project-assets/.github/workflows/ProjectRoot/${{ inputs.unity }}/* .
          rm -rf project-assets
          rm -rf Packages/com.vrchat.core.bootstrap

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: TargetPackage

      - name: get packageName
        id: packageName
        uses: notiz-dev/github-action-json-property@7a701887f4b568b23eb7b78bb0fc49aaeb1b68d3
        with:
          path: "TargetPackage/package.json"
          prop_path: "name"

      - name: Place package
        run: |
          mv TargetPackage Packages/${{ steps.packageName.outputs.prop }}

      - name: Setup vrc-get
        uses: anatawa12/sh-actions/setup-vrc-get@master

      - name: Add VPM repositories
        shell: bash
        env:
          REPOS: ${{ inputs.repos }}
        run: |
          printf '%s\n' "$REPOS" | while IFS= read -r url; do
            if [ -n "${url:-}" ]; then
              echo ">> vrc-get repo add -- \"$url\"" >&2
              vrc-get repo add -- "$url"
            fi
          done

      - name: Resolve VPM packages
        shell: bash
        env:
          PACKAGES: ${{ inputs.packages }}
        run: |
          if [ -n "${{ inputs.vrcsdk-type }}" ] ; then
            echo ">> vrc-get install --yes com.vrchat.${{ inputs.vrcsdk-type }} ${{ inputs.vrcsdk-version }}" >&2
            vrc-get install --yes com.vrchat.${{ inputs.vrcsdk-type }} ${{ inputs.vrcsdk-version }}
          fi
          if [ -n "${PACKAGES:-}" ] ; then
            printf '%s\n' "$PACKAGES" | while IFS= read -r p; do
              if [ -n "${p:-}" ]; then
                echo ">> vrc-get install --yes $p" >&2
                vrc-get install --yes $p
              fi
            done
          fi

      - uses: anatawa12/sh-actions/resolve-vpm-packages@master

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-unity=${{ inputs.unity }}-vrcsdk=${{ inputs.vrcsdk-type }}-${{ inputs.vrcsdk-version }}-packages=${{ inputs.packages }}
          restore-keys: Library-unity=${{ inputs.unity }}-

      - name: Set case name
        id: case-name
        run: |
          if [ -n "${{ inputs.name }}" ] ; then
            echo "name=${{ inputs.unity }} SDK-${{ inputs.vrcsdk-version }} ${{ inputs.name }}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ inputs.unity }} SDK-${{ inputs.vrcsdk-version }}" >> $GITHUB_OUTPUT
          fi

      # Test
      - name: Run tests
        id: gameci
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: EditMode
          customParameters: ${{ inputs.customParameters }} ${{ inputs.assemblyNames != '' && format('-assemblyNames {0}', inputs.assemblyNames) || '' }}
          checkName: ${{ steps.case-name.outputs.name }}
          coverageOptions: ${{ inputs.coverageOptions }}${{ inputs.assemblyFilters != '' && format(';assemblyFilters:{0}', inputs.assemblyFilters) || '' }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test ${{ steps.case-name.outputs.name }}
          path: ${{ steps.gameci.outputs.artifactsPath }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Coverage ${{ steps.case-name.outputs.name }}
          path: ${{ steps.gameci.outputs.coveragePath }}
