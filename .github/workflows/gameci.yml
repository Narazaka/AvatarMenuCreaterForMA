name: GameCI

on:
  push: {}
  pull_request_target: {}
  workflow_dispatch: {}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      checks: write
    strategy:
      fail-fast: false
      matrix:
        repos:
          - |
            https://vpm.nadena.dev/vpm.json
            https://vpm.narazaka.net/index.json
        vrcsdk-type:
          - avatars
        assemblyNames:
          - AvatarMenuCreatorForMA.Test
        assemblyFilters:
          - +AvatarMenuCreatorForMA.*,-AvatarMenuCreatorForMA.Test
        include:
          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.1.1
            vrcsdk-version: 3.1.9
          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.1.1
            vrcsdk-version: 3.2.0
          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.1.1
            vrcsdk-version: 3.4.2

          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.5.1
            vrcsdk-version: 3.2.0
          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.5.1
            vrcsdk-version: 3.4.2

          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.7.7
            vrcsdk-version: 3.2.0
          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.7.7
            vrcsdk-version: 3.4.2

          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.8.4
            vrcsdk-version: 3.2.0
          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.8.4
            vrcsdk-version: 3.4.2
          - unity: 2022.3.6f1
            packages: nadena.dev.modular-avatar 1.8.4
            vrcsdk-version: 3.5.2

          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.9.2
            vrcsdk-version: 3.2.0
          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.9.2
            vrcsdk-version: 3.4.2
          - unity: 2022.3.6f1
            packages: nadena.dev.modular-avatar 1.9.2
            vrcsdk-version: 3.5.2

          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.9.8
            vrcsdk-version: 3.4.2
          - unity: 2022.3.6f1
            packages: nadena.dev.modular-avatar 1.9.8
            vrcsdk-version: 3.5.2

          - unity: 2019.4.31f1
            packages: nadena.dev.modular-avatar 1.9.12
            vrcsdk-version: 3.4.2
          - unity: 2022.3.6f1
            packages: nadena.dev.modular-avatar 1.9.12
            vrcsdk-version: 3.5.2
    steps:
      - name: Checkout template
        uses: actions/checkout@v4
        with:
          repository: vrchat-community/template-avatar

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: TargetPackage

      - name: get packageName
        id: packageName
        uses: notiz-dev/github-action-json-property@7a701887f4b568b23eb7b78bb0fc49aaeb1b68d3
        with:
          path: "TargetPackage/package.json"
          prop_path: "name"

      - name: Place package
        run: |
          mv TargetPackage Packages/${{ steps.packageName.outputs.prop }}

      - name: Setup Project
        run: |
          cp -R Packages/net.narazaka.vrchat.avatar-menu-creater-for-ma/.github/workflows/ProjectRoot/${{ matrix.unity }}/* .
          rm -rf Packages/com.vrchat.core.bootstrap

      - name: Setup vrc-get
        uses: anatawa12/sh-actions/setup-vrc-get@master

      - name: Add VPM repositories
        shell: bash
        env:
          REPOS: ${{ matrix.repos }}
        run: |
          printf '%s\n' "$REPOS" | while IFS= read -r url; do
            if [ -n "${url:-}" ]; then
              echo ">> vrc-get repo add -- \"$url\"" >&2
              vrc-get repo add -- "$url"
            fi
          done

      - name: Resolve VPM packages
        shell: bash
        env:
          PACKAGES: ${{ matrix.packages }}
        run: |
          if [ -n "${{ matrix.vrcsdk-type }}" ] ; then
            echo ">> vrc-get install --yes com.vrchat.${{ matrix.vrcsdk-type }} ${{ matrix.vrcsdk-version }}" >&2
            vrc-get install --yes com.vrchat.${{ matrix.vrcsdk-type }} ${{ matrix.vrcsdk-version }}
          fi
          if [ -n "${PACKAGES:-}" ] ; then
            printf '%s\n' "$PACKAGES" | while IFS= read -r p; do
              if [ -n "${p:-}" ]; then
                echo ">> vrc-get install --yes $p" >&2
                vrc-get install --yes $p
              fi
            done
          fi

      - uses: anatawa12/sh-actions/resolve-vpm-packages@master

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-unity=${{ matrix.unity }}-vrcsdk=${{ matrix.vrcsdk-type }}-${{ matrix.vrcsdk-version }}-packages=${{ matrix.packages }}
          restore-keys: Library-unity=${{ matrix.unity }}-

      - name: Set case name
        id: case-name
        run: echo "name=Test ${{ matrix.unity }} ${{ matrix.vrcsdk-type }}-${{ matrix.vrcsdk-version }}" >> $GITHUB_OUTPUT

      # Test
      - name: Run tests
        id: gameci
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: EditMode
          customParameters: -nographics -assemblyNames ${{ matrix.assemblyNames }}
          checkName: ${{ steps.case-name.outputs.name }}
          coverageOptions: generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:${{ matrix.assemblyFilters }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test ${{ steps.case-name.outputs.name }}
          path: ${{ steps.gameci.outputs.artifactsPath }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Coverage ${{ steps.case-name.outputs.name }}
          path: ${{ steps.gameci.outputs.coveragePath }}
